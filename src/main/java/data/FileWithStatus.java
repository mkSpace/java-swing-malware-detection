package data;

import extensions.Print;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;

public class FileWithStatus {

    private final File file;
    private final StringBuilder readFileText;
    private final AtomicInteger detectedLength;
    private final Set<Malware> detectedMalwareList;
    private FileReader reader;

    public FileWithStatus(File file) {
        this.file = file;
        this.detectedLength = new AtomicInteger(0);
        this.detectedMalwareList = new HashSet<>();
        readFileText = new StringBuilder("");
        try {
            this.reader = new FileReader(file);
        } catch (Exception e) {
            e.printStackTrace();
            reader = null;
        }
    }

    public File getFile() {
        return file;
    }

    public int getDetectedLength() {
        return detectedLength.get();
    }

    public Set<Malware> getDetectedMalwareSet() {
        return detectedMalwareList;
    }

    public String getAllDetectedMalwareSetString() {
        StringBuilder builder = new StringBuilder();
        detectedMalwareList.forEach(malware -> builder.append(malware.getName()).append(", "));
        return builder.toString();
    }

    public synchronized void read() throws IOException, InterruptedException {
        char[] buffer = new char[1];
        int readNumberOfBytes = reader.read(buffer);
        if (readNumberOfBytes == -1) {
            detectedLength.set((int) file.length());
        } else {
            detectedLength.addAndGet(readNumberOfBytes);
        }
        Print.println(readFileText.toString());
        try {
            readFileText.append(buffer);
        } catch (NullPointerException e) {
            e.printStackTrace();
        }
    }

    public synchronized void detectMalware(List<Malware> malwareList) {
        malwareList.forEach(malware -> {
            if (readFileText.toString().contains(malware.getContent())) {
                detectedMalwareList.add(malware);
            }
        });
    }

    public synchronized FileWithStatus readAndDetectMalware(List<Malware> malwareList) throws IOException, InterruptedException {
        if (detectedLength.get() != file.length()) {
            read();
        }
        Thread.sleep(100);
        detectMalware(malwareList);
        return this;
    }

    public boolean canRead() {
        return detectedLength.get() < file.length();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        FileWithStatus that = (FileWithStatus) o;
        return file.length() == file.length() && getDetectedLength() == that.getDetectedLength() && Objects.equals(getFile(), that.getFile()) && Objects.equals(getDetectedMalwareSet(), that.getDetectedMalwareSet());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getFile(), file.length(), getDetectedLength(), getDetectedMalwareSet());
    }

    @Override
    public String toString() {
        return "[" + file.getName() + "] : " + detectedLength + " / " + file.length();
    }
}
