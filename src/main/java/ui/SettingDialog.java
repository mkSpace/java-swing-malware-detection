package ui;

import di.Injection;
import io.reactivex.disposables.CompositeDisposable;
import io.reactivex.schedulers.Schedulers;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.util.Arrays;
import java.util.stream.Collectors;

import static java.awt.FlowLayout.CENTER;
import static java.awt.FlowLayout.LEFT;

public class SettingDialog extends JDialog {

    private static final int DIALOG_WIDTH = 700;
    private static final int DIALOG_HEIGHT = 620;
    private static final int FILE_PANEL_WIDTH = 120;
    private static final int BUTTON_PANEL_HEIGHT = 120;
    private static final int WIDGET_WIDTH_MARGIN = 12;

    private final JPanel listContainerPanel = new JPanel(new FlowLayout());
    private final JPanel filePanel = new JPanel();
    private final JPanel rightPanel = new JPanel(new FlowLayout());
    private final JPanel malwarePanel = new JPanel(new FlowLayout(LEFT));
    private final JPanel threadPanel = new JPanel(new FlowLayout(CENTER));
    private final JPanel buttonPanel = new JPanel();

    private final MainViewModel viewModel = Injection.provideMainViewModel();
    private final CompositeDisposable disposables = new CompositeDisposable();

    private final JButton loadButton = new JButton("File Load");
    private final JButton malwareListLoadButton = new JButton("Malware List Load");
    private final JButton okButton = new JButton("OK");

    private final JList<String> fileList = new JList<>();
    private final JList<String> malwareList = new JList<>();

    private DefaultListModel<String> fileListModel;
    private DefaultListModel<String> malwareListModel;

    public SettingDialog(JFrame owner, String title) {
        super(owner, title);
        setLayout(new FlowLayout());
        getOwner().addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                super.windowClosed(e);
                disposables.clear();
                disposables.dispose();
            }
        });
        setupViews();
        setSize(new Dimension(DIALOG_WIDTH, DIALOG_HEIGHT));
        setLocationRelativeTo(null);
        bindViewModels();
    }

    private void setupViews() {
        setupFilePanel();
        setupThreadPanel();
        setupMalwarePanel();
        setupRightPanel();
        setupListContainer();
        setupButtons();
        add(listContainerPanel);
        add(buttonPanel);
    }

    private void bindViewModels() {
        disposables.add(
                viewModel.getFiles()
                        .observeOn(Schedulers.computation())
                        .subscribe(files -> {
                            fileListModel = new DefaultListModel<>();
                            files.forEach(file -> fileListModel.addElement(file.getName()));
                            fileList.setModel(fileListModel);
                        })
        );

        disposables.add(
                viewModel.getMalwareFiles()
                        .observeOn(Schedulers.computation())
                        .subscribe(malwareFiles -> {
                            malwareListModel = new DefaultListModel<>();
                            malwareFiles.forEach(malwareFile -> malwareListModel.addElement(malwareFile.getName()));
                            malwareList.setModel(malwareListModel);
                        })
        );
    }

    private void setupFilePanel() {
        filePanel.setPreferredSize(new Dimension(FILE_PANEL_WIDTH, DIALOG_HEIGHT - BUTTON_PANEL_HEIGHT));
        fileList.setPreferredSize(new Dimension(FILE_PANEL_WIDTH, (DIALOG_HEIGHT - BUTTON_PANEL_HEIGHT) / 10 * 9));
        fileList.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        JLabel fileLabel = new JLabel("Files");
        filePanel.add(fileLabel);
        filePanel.add(fileList);
    }

    private void setupMalwarePanel() {
        malwarePanel.setSize(new Dimension(DIALOG_WIDTH - FILE_PANEL_WIDTH - WIDGET_WIDTH_MARGIN, (DIALOG_HEIGHT - BUTTON_PANEL_HEIGHT) / 10 * 3));
        malwarePanel.setPreferredSize(new Dimension(DIALOG_WIDTH - FILE_PANEL_WIDTH - WIDGET_WIDTH_MARGIN, (DIALOG_HEIGHT - BUTTON_PANEL_HEIGHT) / 10 * 3));
        malwareList.setPreferredSize(new Dimension((DIALOG_WIDTH - FILE_PANEL_WIDTH) / 10 * 2, (DIALOG_HEIGHT - BUTTON_PANEL_HEIGHT) / 10 * 2));
        malwareList.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        JLabel malwareListLabel = new JLabel("Malware list");
        JLabel totalResultLabel = new JLabel("Total String : 0");
        totalResultLabel.setPreferredSize(new Dimension((DIALOG_WIDTH - FILE_PANEL_WIDTH) / 10 * 7, (DIALOG_HEIGHT - BUTTON_PANEL_HEIGHT) / 10 * 2));
        malwarePanel.add(malwareListLabel);
        malwarePanel.add(malwareList);
        malwarePanel.add(totalResultLabel);
    }

    private void setupThreadPanel() {
        threadPanel.setSize(new Dimension(DIALOG_WIDTH - FILE_PANEL_WIDTH - WIDGET_WIDTH_MARGIN, (DIALOG_HEIGHT - BUTTON_PANEL_HEIGHT) / 10 * 4));
        threadPanel.setPreferredSize(new Dimension(DIALOG_WIDTH - FILE_PANEL_WIDTH - WIDGET_WIDTH_MARGIN, (DIALOG_HEIGHT - BUTTON_PANEL_HEIGHT) / 10 * 4));
        threadPanel.setBackground(Color.WHITE);
        threadPanel.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        JLabel requirementLabel = new JLabel("Minimum thread requirement: 0 ");
        requirementLabel.setPreferredSize(new Dimension(DIALOG_WIDTH - FILE_PANEL_WIDTH, 20));
        threadPanel.add(requirementLabel);
        JPanel threadInputPanel = new JPanel();
        JLabel threadLabel = new JLabel("Thread");
        JTextField threadTextField = new JTextField("");
        threadTextField.setPreferredSize(new Dimension(200, 50));
        threadInputPanel.add(threadLabel);
        threadInputPanel.add(threadTextField);
        threadTextField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                onMinThreadRequirementsChanged(threadTextField.getText());
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                onMinThreadRequirementsChanged(threadTextField.getText());
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                onMinThreadRequirementsChanged(threadTextField.getText());
            }
        });
        threadPanel.add(threadLabel);
        threadPanel.add(threadInputPanel);
    }

    private void setupRightPanel() {
        rightPanel.setPreferredSize(new Dimension(DIALOG_WIDTH - FILE_PANEL_WIDTH - WIDGET_WIDTH_MARGIN, DIALOG_HEIGHT - BUTTON_PANEL_HEIGHT));
        rightPanel.add(malwarePanel);
        rightPanel.add(threadPanel);
    }

    private void setupListContainer() {
        listContainerPanel.setSize(new Dimension(DIALOG_WIDTH, DIALOG_HEIGHT - BUTTON_PANEL_HEIGHT));
        listContainerPanel.setPreferredSize(new Dimension(DIALOG_WIDTH, DIALOG_HEIGHT - BUTTON_PANEL_HEIGHT));
        listContainerPanel.add(filePanel);
        listContainerPanel.add(rightPanel);
    }

    private void setupButtons() {
        buttonPanel.setSize(new Dimension(DIALOG_WIDTH, BUTTON_PANEL_HEIGHT));
        buttonPanel.setPreferredSize(new Dimension(DIALOG_WIDTH, BUTTON_PANEL_HEIGHT));
        buttonPanel.add(loadButton);
        buttonPanel.add(malwareListLoadButton);
        buttonPanel.add(okButton);
        loadButton.addActionListener(e -> {
            JFileChooser chooser = new JFileChooser();
            chooser.setMultiSelectionEnabled(true);
            chooser.showOpenDialog(getOwner());
            File[] files = chooser.getSelectedFiles();
            viewModel.setFiles(Arrays.stream(files).collect(Collectors.toList()));
        });
        malwareListLoadButton.addActionListener(e -> {
            JFileChooser chooser = new JFileChooser();
            chooser.setMultiSelectionEnabled(true);
            chooser.showOpenDialog(getOwner());
            File[] malwareFiles = chooser.getSelectedFiles();
            viewModel.setMalwareFiles(Arrays.stream(malwareFiles).collect(Collectors.toList()));
        });
        okButton.addActionListener(e -> {
            setVisible(false);
        });
    }

    private void onMinThreadRequirementsChanged(String textField) {
        int result;
        try {
            result = Integer.parseInt(textField);
        } catch (NumberFormatException e) {
            result = 0;
        }
        viewModel.setMinThreadRequirement(result);
    }
}
