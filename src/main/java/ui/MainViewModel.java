package ui;

import data.FileNameWithStatus;
import data.ThreadNameWithStatus;
import io.reactivex.Flowable;
import io.reactivex.processors.BehaviorProcessor;

import java.io.File;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class MainViewModel {

    private final BehaviorProcessor<List<File>> _files = BehaviorProcessor.createDefault(Collections.emptyList());
    private final Flowable<List<File>> files = _files;

    private final BehaviorProcessor<List<File>> _malwareFiles = BehaviorProcessor.createDefault(Collections.emptyList());
    private final Flowable<List<File>> malwareFiles = _malwareFiles;

    private final BehaviorProcessor<Integer> _minThreadRequirement = BehaviorProcessor.createDefault(0);
    private final Flowable<Integer> minThreadRequirement = _minThreadRequirement;

    private final Flowable<ExecutorService> _executorService = _minThreadRequirement.map(Executors::newFixedThreadPool);

    private final Flowable<List<ThreadNameWithStatus>> threadNameWithStatus = Flowable.empty();

    private final Flowable<List<FileNameWithStatus>> fileNameWithStatus = Flowable.empty();

    private final BehaviorProcessor<List<FileNameWithStatus>> _benignFiles = BehaviorProcessor.create();
    private final Flowable<List<FileNameWithStatus>> benignFiles = _benignFiles;

    public void addFiles(List<File> files) {
        List<File> temp = _files.getValue();
        Objects.requireNonNull(temp).addAll(files);
        _files.offer(temp);
    }

    public void addMalwareFiles(List<File> files) {
        List<File> temp = _malwareFiles.getValue();
        Objects.requireNonNull(temp).addAll(files);
        _malwareFiles.offer(temp);
    }

    public Flowable<List<File>> getFiles() {
        return files;
    }

    public void setFiles(List<File> files) {
        _files.offer(files);
    }

    public Flowable<List<File>> getMalwareFiles() {
        return malwareFiles;
    }

    public void setMalwareFiles(List<File> files) {
        _malwareFiles.offer(files);
    }

    public Flowable<Integer> getMinThreadRequirement() {
        return minThreadRequirement;
    }

    public void setMinThreadRequirement(int minThreadRequirement) {
        _minThreadRequirement.offer(minThreadRequirement);
    }

    public Flowable<List<ThreadNameWithStatus>> getThreadNameWithStatus() {
        return threadNameWithStatus;
    }

    public Flowable<List<FileNameWithStatus>> getFileNameWithStatus() {
        return fileNameWithStatus;
    }

    public Flowable<List<FileNameWithStatus>> getBenignFiles() {
        return benignFiles;
    }

}
