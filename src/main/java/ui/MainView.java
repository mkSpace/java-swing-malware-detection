package ui;

import di.Injection;
import io.reactivex.disposables.CompositeDisposable;
import io.reactivex.schedulers.Schedulers;

import javax.swing.*;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import static java.awt.FlowLayout.CENTER;

public class MainView implements View {

    private static final int MAIN_FRAME_WIDTH = 1024;
    private static final int MAIN_FRAME_HEIGHT = 720;
    private static final int BUTTON_PANEL_HEIGHT = 60;
    private static final int WIDGET_MARGIN = 12;
    private static final int[] PANEL_WIDTH_RATIO = {1, 2, 4, 2};

    private final MainViewModel viewModel = Injection.provideMainViewModel();
    private final CompositeDisposable disposables = new CompositeDisposable();

    private final JFrame mainFrame;
    private final JPanel listContainerPanel;
    private final JPanel filesPanel;
    private final JPanel threadPanel;
    private final JPanel fileDetectionPanel;
    private final JPanel resultPanel;
    private final JPanel buttonPanel;
    private final JButton settingButton;
    private final JButton readyButton;
    private final JButton startButton;

    private DefaultListModel<String> fileListModel;
    private DefaultListModel<String> malwareFileListModel;
    private DefaultListModel<String> threadListModel;
    private DefaultListModel<String> fileDetectionListModel;
    private DefaultListModel<String> benignListModel;
    private DefaultListModel<String> malwareListModel;

    private JList<String> fileList;
    private JList<String> malwareFileList;
    private JList<String> threadList;
    private JList<String> fileDetectionList;
    private JList<String> benignList;
    private JList<String> malwareList;

    public MainView() {
        mainFrame = new JFrame("App");
        listContainerPanel = new JPanel();
        filesPanel = new JPanel();
        threadPanel = new JPanel();
        fileDetectionPanel = new JPanel();
        resultPanel = new JPanel();
        buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        settingButton = new JButton("Setting");
        readyButton = new JButton("Ready");
        startButton = new JButton("Start");
        listContainerPanel.setPreferredSize(new Dimension(MAIN_FRAME_WIDTH, MAIN_FRAME_HEIGHT - BUTTON_PANEL_HEIGHT));
        buttonPanel.setPreferredSize(new Dimension(MAIN_FRAME_WIDTH, BUTTON_PANEL_HEIGHT));
        mainFrame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                super.windowClosed(e);
                disposables.clear();
                disposables.dispose();
            }
        });
    }

    @Override
    public void setupViews() {
        setupMainFrame();
        setupListViews();
        setupButtons();
        setupFilesPanel();
        setupThreadPanel();
        setupFileDetectionPanel();
        setupResultPanel();
        new SettingDialog(mainFrame, "Setting").setVisible(true);
        bindViewModels();
    }

    @Override
    public void bindViewModels() {
        disposables.add(
                viewModel.getFiles()
                        .observeOn(Schedulers.computation())
                        .subscribe(files -> {
                            fileListModel = new DefaultListModel<>();
                            files.forEach(file -> fileListModel.addElement(file.getName()));
                            fileList.setModel(fileListModel);
                        })
        );

        disposables.add(
                viewModel.getMalwareFiles()
                        .observeOn(Schedulers.computation())
                        .subscribe(malwareFiles -> {
                            malwareFileListModel = new DefaultListModel<>();
                            malwareFiles.forEach(malwareFile -> malwareFileListModel.addElement(malwareFile.getName()));
                            malwareFileList.setModel(malwareFileListModel);
                        })
        );

        disposables.add(
                viewModel.getThreadNameWithStatus()
                        .observeOn(Schedulers.computation())
                        .subscribe(threadWithStatusList -> {
                            threadListModel = new DefaultListModel<>();
                            threadWithStatusList.forEach(threadWithStatus -> threadListModel.addElement(threadWithStatus.toString()));
                            threadList.setModel(threadListModel);
                        })
        );

        disposables.add(
                viewModel.getFileNameWithStatus()
                        .observeOn(Schedulers.computation())
                        .subscribe(fileNameWithStatusList -> {
                            fileDetectionListModel = new DefaultListModel<>();
                            fileNameWithStatusList.forEach(fileNameWithStatus -> fileDetectionListModel.addElement(fileNameWithStatus.toString()));
                            fileDetectionList.setModel(fileDetectionListModel);
                        })
        );

    }

    private void setupListViews() {
        fileList = new JList<>();
        fileList.setPreferredSize(new Dimension(getPanelWidthSize(PanelIndex.FILE), getHeightByMainFrameRatio(6)));
        fileList.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        malwareFileList = new JList<>();
        malwareFileList.setPreferredSize(new Dimension(getPanelWidthSize(PanelIndex.FILE), getHeightByMainFrameRatio(2)));
        malwareFileList.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        threadList = new JList<>();
        threadList.setPreferredSize(new Dimension(getPanelWidthSize(PanelIndex.THREAD), getHeightByMainFrameRatio(8)));
        threadList.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        fileDetectionList = new JList<>();
        fileDetectionList.setPreferredSize(new Dimension(getPanelWidthSize(PanelIndex.FILE_DETECTION), getHeightByMainFrameRatio(8)));
        fileDetectionList.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        benignList = new JList<>();
        benignList.setPreferredSize(new Dimension(getPanelWidthSize(PanelIndex.RESULT), getHeightByMainFrameRatio(4)));
        benignList.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        malwareList = new JList<>();
        malwareList.setPreferredSize(new Dimension(getPanelWidthSize(PanelIndex.RESULT), getHeightByMainFrameRatio(4)));
        malwareList.setBorder(BorderFactory.createLineBorder(Color.BLACK));
    }

    private void setupMainFrame() {
        mainFrame.setTitle("2017112622_박재민_운영체제_과제_3");
        mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        mainFrame.setSize(MAIN_FRAME_WIDTH + WIDGET_MARGIN * 3, MAIN_FRAME_HEIGHT + WIDGET_MARGIN * 3);
        mainFrame.setVisible(true);
        mainFrame.setLayout(new FlowLayout(CENTER, 0, 0));
        mainFrame.setLocationRelativeTo(null);
        mainFrame.setBackground(Color.gray);
        listContainerPanel.add(filesPanel);
        listContainerPanel.add(threadPanel);
        listContainerPanel.add(fileDetectionPanel);
        listContainerPanel.add(resultPanel);
        mainFrame.add(listContainerPanel);
        mainFrame.add(buttonPanel);
        mainFrame.revalidate();
    }

    private void setupButtons() {
        buttonPanel.add(settingButton);
        buttonPanel.add(readyButton);
        buttonPanel.add(startButton);
        settingButton.addActionListener(e -> {
            new SettingDialog(mainFrame, "Setting").setVisible(true);
        });
    }

    private void setupFilesPanel() {
        filesPanel.setPreferredSize(getPanelSize(PanelIndex.FILE));
        JLabel filesLabel = new JLabel("Files");
        JLabel malwareLabel = new JLabel("Malware List");
        filesPanel.add(filesLabel);
        filesPanel.add(fileList);
        filesPanel.add(malwareLabel);
        filesPanel.add(malwareFileList);
    }

    private void setupThreadPanel() {
        threadPanel.setPreferredSize(getPanelSize(PanelIndex.THREAD));
        JLabel threadLabel = new JLabel("Thread status");
        threadPanel.add(threadLabel);
        threadPanel.add(threadList);
    }

    private void setupFileDetectionPanel() {
        fileDetectionPanel.setPreferredSize(getPanelSize(PanelIndex.FILE_DETECTION));
        JLabel fileDetectionLabel = new JLabel("File detection status");
        fileDetectionPanel.add(fileDetectionLabel);
        fileDetectionPanel.add(fileDetectionList);
    }

    private void setupResultPanel() {
        resultPanel.setPreferredSize(getPanelSize(PanelIndex.RESULT));
        JLabel benignLabel = new JLabel("Benign");
        JLabel malwareLabel = new JLabel("Malware");
        resultPanel.add(benignLabel);
        resultPanel.add(benignList);
        resultPanel.add(malwareLabel);
        resultPanel.add(malwareList);
    }

    private int getHeightByMainFrameRatio(float ratio) {
        return (int) Math.round((MAIN_FRAME_HEIGHT - BUTTON_PANEL_HEIGHT) / 10.0 * ratio);
    }

    private int getPanelWidthSize(PanelIndex panelIndex) {
        return MAIN_FRAME_WIDTH / 10 * PANEL_WIDTH_RATIO[panelIndex.ordinal()];
    }

    private Dimension getPanelSize(PanelIndex panelIndex) {
        return new Dimension(getPanelWidthSize(panelIndex), MAIN_FRAME_HEIGHT);
    }

    private enum PanelIndex {
        FILE, THREAD, FILE_DETECTION, RESULT
    }
}
